import java.util.Scanner;

public class BellmanFord {

    // A class to represent the edge of a graph
    static class Edge {
        int src, dest, weight;

        public Edge(int src, int dest, int weight) {
            this.src = src;
            this.dest = dest;
            this.weight = weight;
        }
    }

    // Method to implement the Bellman-Ford algorithm
    public static void bellmanFord(Edge[] edges, int V, int E, int source) {
        // Step 1: Initialize distances from source to all other vertices as INFINITE
        int[] dist = new int[V];
        for (int i = 0; i < V; i++) {
            dist[i] = Integer.MAX_VALUE; // INFINITE
        }
        dist[source] = 0;

        // Step 2: Relax all edges |V| - 1 times.
        for (int i = 1; i < V; i++) {
            for (int j = 0; j < E; j++) {
                int u = edges[j].src;
                int v = edges[j].dest;
                int weight = edges[j].weight;
                
                if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                }
            }
        }

        // Step 3: Check for negative-weight cycles.
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int weight = edges[j].weight;

            if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                System.out.println("Graph contains negative weight cycle");
                return;
            }
        }

        // Print the result
        printSolution(dist, V);
    }

    // Method to print the solution
    public static void printSolution(int[] dist, int V) {
        System.out.println("Vertex Distance from Source:");
        for (int i = 0; i < V; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                System.out.println("Vertex " + i + ": INFINITY");
            } else {
                System.out.println("Vertex " + i + ": " + dist[i]);
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Number of vertices and edges
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();
        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        // Edge list to store all edges
        Edge[] edges = new Edge[E];

        // Input the edges
        System.out.println("Enter the edges (src, dest, weight):");
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int weight = sc.nextInt();
            edges[i] = new Edge(u, v, weight);
        }

        // Input the source vertex
        System.out.print("Enter source vertex: ");
        int source = sc.nextInt();

        // Run the Bellman-Ford algorithm
        bellmanFord(edges, V, E, source);

        sc.close();
    }
}
