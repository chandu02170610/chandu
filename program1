import java.util.Scanner;
import java.util.ArrayList;
import java.util.InputMismatchException;

public class StudentManagementSystem {

    // Student class to hold student details
    static class Student {
        String name;
        int age;
        double grade;

        Student(String name, int age, double grade) {
            this.name = name;
            this.age = age;
            this.grade = grade;
        }

        void displayStudentInfo() {
            System.out.println("Name: " + name);
            System.out.println("Age: " + age);
            System.out.println("Grade: " + grade);
        }
    }

    // List to hold students
    static ArrayList<Student> students = new ArrayList<>();
    
    // Method to display menu
    static void displayMenu() {
        System.out.println("\nStudent Management System");
        System.out.println("1. Add Student");
        System.out.println("2. Display All Students");
        System.out.println("3. Calculate Average Grade");
        System.out.println("4. Exit");
    }

    // Method to add a new student
    static void addStudent(Scanner sc) {
        sc.nextLine(); // Consume newline left over
        System.out.print("Enter student's name: ");
        String name = sc.nextLine();
        
        int age = 0;
        boolean validAge = false;
        while (!validAge) {
            try {
                System.out.print("Enter student's age: ");
                age = sc.nextInt();
                validAge = true;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input! Please enter a valid age.");
                sc.next(); // clear the invalid input
            }
        }

        double grade = 0;
        boolean validGrade = false;
        while (!validGrade) {
            try {
                System.out.print("Enter student's grade: ");
                grade = sc.nextDouble();
                validGrade = true;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input! Please enter a valid grade.");
                sc.next(); // clear the invalid input
            }
        }

        students.add(new Student(name, age, grade));
        System.out.println("Student added successfully!");
    }

    // Method to display all students
    static void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No students found!");
        } else {
            for (int i = 0; i < students.size(); i++) {
                System.out.println("\nStudent " + (i + 1) + ":");
                students.get(i).displayStudentInfo();
                System.out.println("--------------------------");
            }
        }
    }

    // Method to calculate the average grade
    static void calculateAverageGrade() {
        if (students.isEmpty()) {
            System.out.println("No students to calculate the average.");
            return;
        }

        double totalGrade = 0;
        for (Student student : students) {
            totalGrade += student.grade;
        }

        double averageGrade = totalGrade / students.size();
        System.out.println("Average Grade: " + averageGrade);
    }

    // Main method to run the program
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        boolean running = true;

        while (running) {
            displayMenu();
            int choice = 0;
            boolean validChoice = false;

            // Input validation for menu choice
            while (!validChoice) {
                try {
                    System.out.print("Enter your choice (1-4): ");
                    choice = sc.nextInt();
                    if (choice < 1 || choice > 4) {
                        System.out.println("Please enter a number between 1 and 4.");
                    } else {
                        validChoice = true;
                    }
                } catch (InputMismatchException e) {
                    System.out.println("Invalid choice! Please enter a valid number.");
                    sc.next(); // clear the invalid input
                }
            }

            // Handle user choice
            switch (choice) {
                case 1:
                    addStudent(sc);
                    break;
                case 2:
                    displayAllStudents();
                    break;
                case 3:
                    calculateAverageGrade();
                    break;
                case 4:
                    running = false;
                    System.out.println("Exiting the program...");
                    break;
            }
        }

        sc.close();
    }
}
